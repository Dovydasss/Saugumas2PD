/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.is2pd;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.JOptionPane;
import javax.xml.bind.DatatypeConverter;



/**
 *
 * @author dovyd
 */


public class DES extends javax.swing.JFrame {
    public Cipher encrypt;
    public Cipher decrypt; 

    /**
     * Creates new form DES
     */
    

    public DES() {
        initComponents();
        setLocationRelativeTo(null);
        this.pack();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Enter text:");

        jLabel2.setText("Enter key:");

        jLabel3.setText("Select mode:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ECB", "CBC"}));

        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Decrypt from file");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Encrypt to file");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3))
                            .addComponent(jButton2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(186, 186, 186))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(54, 54, 54)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{
           
        boolean canRun = true;
       if(jTextField1.getText().isEmpty())
       {
            canRun = false;
            JOptionPane.showMessageDialog(null, "Please enter text");
       }
       if(jTextField2.getText().isEmpty())
       {
          canRun = false;
          JOptionPane.showMessageDialog(null, "Please enter key");
       }
       

       if(canRun == true){
      if(jComboBox1.getSelectedItem().toString().equals("ECB"))
      {
      encrypt = Cipher.getInstance("DES/ECB/PKCS5Padding");
       String  message= jTextField1.getText();
      byte[] myMessage =message.getBytes(); //string to byte array as DES works on bytes
      
      //Creating key
      //n converting string to bytes, becouse des using bytes.
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String Password = jTextField2.getText();
      byte[] mybyte = Password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);

      encrypt.init(Cipher.ENCRYPT_MODE, myDESKey);
      byte[] myEncryptedBytes=encrypt.doFinal(myMessage);
     
      //System.out.println(Arrays.toString(myEncryptedBytes));
      String encrypteddata=new String(myEncryptedBytes);
      jTextArea1.setText(encrypteddata);
      
      }
 

        if(jComboBox1.getSelectedItem().toString().equals("CBC"))
      {
      encrypt = Cipher.getInstance("DES/CBC/PKCS5Padding");
      byte[] ivBytes = new byte[]{0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
           IvParameterSpec ivectorSpecv = new IvParameterSpec(ivBytes);
      String  message= jTextField1.getText();
      byte[] myMessage =message.getBytes(); //string to byte array as DES works on bytes
      
      //Creating key
      //n converting string to bytes, becouse des using bytes.
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String Password = jTextField2.getText();
      byte[] mybyte = Password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);

      encrypt.init(Cipher.ENCRYPT_MODE, myDESKey, ivectorSpecv);
      byte[] myEncryptedBytes=encrypt.doFinal(myMessage);
     
      //System.out.println(Arrays.toString(myEncryptedBytes));
      String encrypteddata=new String(myEncryptedBytes);
      jTextArea1.setText(encrypteddata);
      }
       }
      
    

 
  
}catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidKeySpecException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException ex)   
{
ex.printStackTrace();
}   
 
 
    
    
  

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       try{
           
        boolean canRun = true;
       if(jTextField1.getText().isEmpty())
       {
            canRun = false;
            JOptionPane.showMessageDialog(null, "Please enter text");
       }
       if(jTextField2.getText().isEmpty())
       {
          canRun = false;
          JOptionPane.showMessageDialog(null, "Please enter key");
       }
       
if(canRun == true){
      if(jComboBox1.getSelectedItem().toString().equals("ECB"))
      {
      decrypt = Cipher.getInstance("DES/ECB/PKCS5Padding");  
        String  message=jTextField1.getText();
        byte[] myMessage =message.getBytes();
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String password = jTextField2.getText();
      byte[] mybyte = password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);
      decrypt.init(Cipher.DECRYPT_MODE, myDESKey);
   
      byte[] myDecryptedBytes=decrypt.doFinal(myMessage);
      
      String decrypteddata=new String(myDecryptedBytes);
       
       jTextArea2.setText(decrypteddata);
      }
 

        if(jComboBox1.getSelectedItem().toString().equals("CBC"))
      {
      decrypt = Cipher.getInstance("DES/CBC/PKCS5Padding");
      
        String  message=jTextField1.getText();
        byte[] myMessage = message.getBytes();
        
  byte[] ivBytes = new byte[]{0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
  IvParameterSpec ivectorSpecv = new IvParameterSpec(ivBytes);
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String password = jTextField2.getText();
      byte[] mybyte = password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);
      decrypt.init(Cipher.DECRYPT_MODE, myDESKey, ivectorSpecv);
      
 
      
      byte[] myDecryptedBytes=decrypt.doFinal(myMessage);
      
      String decrypteddata=new String(myDecryptedBytes);
       
       jTextArea2.setText(decrypteddata);
      }
}
      
           
       
      
  
}catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidKeySpecException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException ex)   
{
ex.printStackTrace();
}   
 
 
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
         try{
           
        boolean canRun = true;
       if(jTextField1.getText().isEmpty())
       {
            canRun = false;
            JOptionPane.showMessageDialog(null, "Please enter text");
       }
       if(jTextField2.getText().isEmpty())
       {
          canRun = false;
          JOptionPane.showMessageDialog(null, "Please enter key");
       }
       

       if(canRun == true){
      if(jComboBox1.getSelectedItem().toString().equals("ECB"))
      {
      encrypt = Cipher.getInstance("DES/ECB/PKCS5Padding");
       String  message= jTextField1.getText();
      byte[] myMessage =message.getBytes(); //string to byte array as DES works on bytes
      
      //Creating key
      //n converting string to bytes, becouse des using bytes.
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String Password = jTextField2.getText();
      byte[] mybyte = Password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);

      encrypt.init(Cipher.ENCRYPT_MODE, myDESKey);
      byte[] myEncryptedBytes=encrypt.doFinal(myMessage);
     
      //System.out.println(Arrays.toString(myEncryptedBytes));
      String encrypteddata=new String(myEncryptedBytes);
      Path path = Paths.get("C:\\Users\\dovyd\\Documents\\NetBeansProjects\\IS2PD\\EncryptedECB.txt");
Files.write(path, myEncryptedBytes);
      JOptionPane.showMessageDialog(null, "Success");
    
      
      }
 

        if(jComboBox1.getSelectedItem().toString().equals("CBC"))
      {
      encrypt = Cipher.getInstance("DES/CBC/PKCS5Padding");
      byte[] ivBytes = new byte[]{0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
           IvParameterSpec ivectorSpecv = new IvParameterSpec(ivBytes);
      String  message= jTextField1.getText();
      byte[] myMessage =message.getBytes(); //string to byte array as DES works on bytes
      
      //Creating key
      //n converting string to bytes, becouse des using bytes.
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String Password = jTextField2.getText();
      byte[] mybyte = Password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);

      encrypt.init(Cipher.ENCRYPT_MODE, myDESKey, ivectorSpecv);
      byte[] myEncryptedBytes=encrypt.doFinal(myMessage);
     
      //System.out.println(Arrays.toString(myEncryptedBytes));
      String encrypteddata=new String(myEncryptedBytes);
      
Path path = Paths.get("C:\\Users\\dovyd\\Documents\\NetBeansProjects\\IS2PD\\EncryptedCBC.txt");
Files.write(path, myEncryptedBytes);
      JOptionPane.showMessageDialog(null, "Success");
      }
       }
      
    

 
  
}catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidKeySpecException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException | IOException ex)   
{
ex.printStackTrace();
}   
 
 
    
    
  
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
     
         
        
        try{
           
        
      if(jComboBox1.getSelectedItem().toString().equals("ECB"))
      {
          
         byte[] bytes = Files.readAllBytes(Paths.get("C:\\Users\\dovyd\\Documents\\NetBeansProjects\\IS2PD\\EncryptedECB.txt"));

    String content = new String(bytes);
  
      decrypt = Cipher.getInstance("DES/ECB/PKCS5Padding");  
        String  message=content;
        byte[] myMessage =message.getBytes();
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String password = jTextField2.getText();
      byte[] mybyte = password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);
      decrypt.init(Cipher.DECRYPT_MODE, myDESKey);
   
      byte[] myDecryptedBytes=decrypt.doFinal(myMessage);
      
      String decrypteddata=new String(myDecryptedBytes);
       
       jTextArea2.setText(decrypteddata);
      }
 

        if(jComboBox1.getSelectedItem().toString().equals("CBC"))
      {
      decrypt = Cipher.getInstance("DES/CBC/PKCS5Padding");
      byte[] bytes = Files.readAllBytes(Paths.get("C:\\Users\\dovyd\\Documents\\NetBeansProjects\\IS2PD\\EncryptedCBC.txt"));

    String content = new String(bytes);
      
      
        String  message=content;
        byte[] myMessage = message.getBytes();
        
  byte[] ivBytes = new byte[]{0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
  IvParameterSpec ivectorSpecv = new IvParameterSpec(ivBytes);
      SecretKeyFactory MyKeyFactory = SecretKeyFactory.getInstance("DES");
      String password = jTextField2.getText();
      byte[] mybyte = password.getBytes();
      DESKeySpec myMaterial = new DESKeySpec(mybyte);
      SecretKey myDESKey = MyKeyFactory.generateSecret(myMaterial);
      decrypt.init(Cipher.DECRYPT_MODE, myDESKey, ivectorSpecv);
      
 
      
      byte[] myDecryptedBytes=decrypt.doFinal(myMessage);
      
      String decrypteddata=new String(myDecryptedBytes);
       
       jTextArea2.setText(decrypteddata);
      }

      
           
       
      
  
}catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidKeySpecException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException | IOException ex)   
{
ex.printStackTrace();
}   
 
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DES().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables


}

 

